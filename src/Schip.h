#pragma once

#include <cstdint>
#include <array>

#include "Chip8.h"
#include "Signal.h"
#include "EventArgs.h"

class Memory;
class KeyboardDevice;
class BitmappedGraphics;
class Configuration;

class Schip : public Chip8 {
public:
	Schip(const Memory& memory, const KeyboardDevice& keyboard, const BitmappedGraphics& display, const Configuration& configuration);
	virtual ~Schip();

	Signal<EventArgs> HighResolutionConfigured;
	Signal<EventArgs> LowResolutionConfigured;

	virtual void initialise();

protected:
	void onHighResolution();
	void onLowResolution();

	virtual bool emulateInstructions_F(int nnn, int nn, int n, int x, int y);
	virtual bool emulateInstructions_D(int nnn, int nn, int n, int x, int y);
	virtual bool emulateInstructions_0(int nnn, int nn, int n, int x, int y);

	virtual void SHR(int x, int y);
	virtual void SHL(int x, int y);
	virtual void JP_V0(int x, int nnn);
	virtual void LD_Vx_II(int x);
	virtual void LD_II_Vx(int x);

private:
	enum {
		HighFontOffset = 0x110
	};

	std::array<uint8_t, 10 * 16> m_highFont = { {
		0x7C, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C, 0x00, // 0
		0x08, 0x18, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3C, 0x00, // 1
		0x7C, 0x82, 0x02, 0x02, 0x04, 0x18, 0x20, 0x40, 0xFE, 0x00, // 2
		0x7C, 0x82, 0x02, 0x02, 0x3C, 0x02, 0x02, 0x82, 0x7C, 0x00, // 3
		0x84, 0x84, 0x84, 0x84, 0xFE, 0x04, 0x04, 0x04, 0x04, 0x00, // 4
		0xFE, 0x80, 0x80, 0x80, 0xFC, 0x02, 0x02, 0x82, 0x7C, 0x00, // 5
		0x7C, 0x82, 0x80, 0x80, 0xFC, 0x82, 0x82, 0x82, 0x7C, 0x00, // 6
		0xFE, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x20, 0x20, 0x00, // 7
		0x7C, 0x82, 0x82, 0x82, 0x7C, 0x82, 0x82, 0x82, 0x7C, 0x00, // 8
		0x7C, 0x82, 0x82, 0x82, 0x7E, 0x02, 0x02, 0x82, 0x7C, 0x00, // 9
		0x10, 0x28, 0x44, 0x82, 0x82, 0xFE, 0x82, 0x82, 0x82, 0x00, // A
		0xFC, 0x82, 0x82, 0x82, 0xFC, 0x82, 0x82, 0x82, 0xFC, 0x00, // B
		0x7C, 0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x82, 0x7C, 0x00, // C
		0xFC, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xFC, 0x00, // D
		0xFE, 0x80, 0x80, 0x80, 0xF8, 0x80, 0x80, 0x80, 0xFE, 0x00, // E
		0xFE, 0x80, 0x80, 0x80, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x00, // F
	} };

	std::array<uint8_t, 8> m_r;

	bool m_compatibility = false;

	void LD_HF_Vx(int x);
	void XDRW(int x, int y);
	void EXIT();
	void SCDOWN(int n);
	void COMPATIBILITY();
	void SCRIGHT();
	void SCLEFT();
	void LOW();
	void HIGH();
	void LD_R_Vx(int x);
	void LD_Vx_R(int x);
};
